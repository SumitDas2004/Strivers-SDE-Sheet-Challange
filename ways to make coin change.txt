import java.util.Arrays;
public class Solution {
	static long solve(int denominations[], int value, long dp[][], int i){
		if(i<0){
			if(value==0)return 1;
			return 0;
		}
		if(dp[i][value]!=-1)return dp[i][value];
		long pick=0;
		long nonPick=solve(denominations, value, dp, i-1);
		if(i>=0 && value-denominations[i]>=0)pick=solve(denominations, value-denominations[i], dp, i);
		return dp[i][value]=pick+nonPick;
	}

	public static long countWaysToMakeChange(int denominations[], int value){
        //write your code here	
		long dp[][]=new long[denominations.length][value+1];	
		for(long i[]:dp)Arrays.fill(i, -1);
		return solve(denominations, value, dp, denominations.length-1);	

	}
	
}