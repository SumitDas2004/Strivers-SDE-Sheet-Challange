import java.util.*;
public class Solution {
    static int time;
    static List<List<Integer>> ans;
    static void dfs(ArrayList<ArrayList<Integer>> adj, int node, int[] dis, int[] low, boolean[] inStack, Stack<Integer> st){
        dis[node]=time;
        low[node]=time;
        st.push(node);
        inStack[node]=true;
        time++;
        for(int i:adj.get(node)){
            if(dis[i]==-1){
                dfs(adj, i, dis, low, inStack, st);
                low[node]=Math.min(low[i], low[node]);
            }else if(inStack[i]){
                low[node]=Math.min(low[node], dis[i]);
            }
        }
        if(dis[node]==low[node]){
            ArrayList<Integer> tmp=new ArrayList<Integer>();
            while(!st.isEmpty() && st.peek()!=node){
                inStack[st.peek()]=false;
                tmp.add(st.pop());
            }
            if(!st.isEmpty()){
                inStack[st.peek()]=false;
                tmp.add(st.pop());
            }
            ans.add(tmp);
        }
    }
    public static List<List<Integer>> stronglyConnectedComponents(int n, int[][] edges) {
        // Write your code here
        ans=new ArrayList<>();
        time=0;
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        for(int i=0;i<n;i++)adj.add(new ArrayList<>());
        for(int[] i:edges)adj.get(i[0]).add(i[1]);
        int[] dis=new int[n];
        int[] low=new int[n];
        Arrays.fill(dis, -1);
        for(int i=0;i<n;i++){
           if(dis[i]==-1)
            dfs(adj, i, dis, low, new boolean[n], new Stack<>());
        }
        return ans;

    }
}