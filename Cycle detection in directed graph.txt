import java.util.ArrayList;
public class Solution {
  static boolean dfs(ArrayList<ArrayList<Integer>> adj, int cur, boolean dfsVisited[], boolean visited[]){
    dfsVisited[cur]=true;
    visited[cur]=true;
    for(int i:adj.get(cur)){
      if(!visited[i]){
      if(dfs(adj, i, dfsVisited, visited))return true;
      }else if(dfsVisited[i])return true;
    }
    dfsVisited[cur]=false;
    return false;
  }
  public static boolean detectCycleInDirectedGraph(int n, ArrayList < ArrayList < Integer >> edges) {
    // Write your code here.\
    ArrayList < ArrayList < Integer >> adj=new ArrayList<>();
    for(int i=0;i<n;i++)adj.add(new ArrayList<>());
    for(ArrayList<Integer> i:edges){
      adj.get(i.get(0)-1).add(i.get(1)-1);
    }
    boolean visited[]=new boolean[n];
    boolean dfsVisited[]=new boolean[n];
    for(int i=0;i<n;i++){
      if(!visited[i])
      if(dfs(adj, i, dfsVisited, visited))return true;
    }
    return false;

  }
}