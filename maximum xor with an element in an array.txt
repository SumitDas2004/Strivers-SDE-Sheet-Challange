import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Collections;
class cmp implements Comparator<ArrayList<Integer>>{
    public int compare(ArrayList<Integer> a, ArrayList<Integer> b){
        return Integer.compare(a.get(1), b.get(1));
    }
} 
class TrieNode{
    TrieNode arr[];
    TrieNode(){
        arr=new TrieNode[2];
        Arrays.fill(arr, null);
    }
}
public class Solution {
    static TrieNode root=new TrieNode();
    static void insert(int a){
        TrieNode cur=root;
        for(int i=31;i>=0;i--){
            if(((1<<i)&a)==0){
                if(cur.arr[0]==null)
                    cur.arr[0]=new TrieNode();
                cur=cur.arr[0];
            }else{
                if(cur.arr[1]==null)
                    cur.arr[1]=new TrieNode();
                cur=cur.arr[1];
            }
        }
    }
    static int find(int a){
        int ans=0;
        TrieNode cur=root;
        for(int i=31;i>=0;i--){
            if(((1<<i)&a)!=0){
                if(cur.arr[0]!=null){
                    ans+=(1<<i);
                    cur=cur.arr[0];
                }else cur=cur.arr[1];
            }else{
                if(cur.arr[1]!=null){
                    ans+=(1<<i);
                    cur=cur.arr[1];
                }else cur=cur.arr[0];
            }
        }
        return ans;
    }
    public static ArrayList<Integer> maxXorQueries(ArrayList<Integer> arr, ArrayList<ArrayList<Integer>> queries) {
        // Write your code here.
        root=new TrieNode();
        ArrayList<Integer> ans=new ArrayList<>();
        for(int i=0;i<queries.size();i++){
            queries.get(i).add(i);
            ans.add(-1);
        }
        Collections.sort(queries, new cmp());
        Collections.sort(arr);
        int visited=0;
        for(ArrayList<Integer> i:queries){
            if(i.get(1)<arr.get(0))ans.set(i.get(2), -1);
            else{
                while(visited<arr.size() && arr.get(visited)<=i.get(1)){
                    insert(arr.get(visited));
                    visited++;
                }
                ans.set(i.get(2), find(i.get(0)));
            }
        }
        return ans;
    }
}