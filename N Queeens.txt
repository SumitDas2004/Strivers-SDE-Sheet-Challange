import java.util.*;
public class Solution {
    static ArrayList<ArrayList<Integer>> list=new ArrayList<>();
    static void add(boolean board[][]){
        ArrayList<Integer> tmp=new ArrayList<>();
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board.length;j++){
                if(board[i][j])tmp.add(1);
                else tmp.add(0);
            }
        }
        list.add(tmp);
    }
    static boolean solve(int col, int n, boolean board[][]){
        if(col==n){
            add(board);
            return true;
        }
        for(int i=0;i<n;i++){
            if(isSafe(i, col, board)){
                board[i][col]=true;
                solve(col+1, n, board);
                board[i][col]=false;
            }
        }
        return false;
    }
    static boolean isSafe(int row, int col, boolean board[][]){
        for(int i=col-1;i>=0;i--){
            if(board[row][i])return false;
        }
        for(int i=row+1, j=col-1;i<board.length && j>=0;i++, j--){
            if(board[i][j])return false;
        }
         for(int i=row-1, j=col-1;i>=0 && j>=0;i--, j--){
            if(board[i][j])return false;
        }
        return true;
    }
    public static ArrayList<ArrayList<Integer>> solveNQueens(int n) {
        // Write your code here.
        list=new ArrayList<>();
        boolean board[][]=new boolean[n][n];
        solve(0, n, board);
        return list;
    }
}