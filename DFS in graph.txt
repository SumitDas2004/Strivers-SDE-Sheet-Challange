import java.util.ArrayList;

public class Solution {
    static void dfs(int cur, ArrayList<ArrayList<Integer>> adj, boolean visited[], ArrayList<Integer> tmp){
        tmp.add(cur);
        for(int i:adj.get(cur)){
            if(visited[i])continue;
            visited[i]=true;
            dfs(i, adj, visited, tmp);
        }
    }
    public static ArrayList<ArrayList<Integer>> depthFirstSearch(int v, int p, ArrayList<ArrayList<Integer>> edges) {
        // Write your code here.
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        ArrayList<ArrayList<Integer>> ans=new ArrayList<>();
        for(int i=0;i<v;i++){
            adj.add(new ArrayList<>());
        }
        for(ArrayList<Integer> e:edges){
            adj.get(e.get(0)).add(e.get(1));
            adj.get(e.get(1)).add(e.get(0));
        }
        boolean visited[]=new boolean[v];
        for(int i=0;i<v;i++){
            if(!visited[i]){
                ArrayList<Integer> tmp=new ArrayList<>();
                visited[i]=true;
                dfs(i, adj, visited,tmp);
                ans.add(tmp);
            }
        }
        return ans;

    }
}