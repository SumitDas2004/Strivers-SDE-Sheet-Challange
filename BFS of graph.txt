import java.util.* ;
import java.io.*; 
public class Solution {
	static void bfs(ArrayList<ArrayList<Integer>> adj, ArrayList<Integer> ans, boolean [] visited, int cur){
		
		Queue<Integer> q=new LinkedList<>();
		q.add(cur);
		visited[cur]=true;
		while(!q.isEmpty()){
			int e=q.poll();
			ans.add(e);
			for(int i:adj.get(e)){
				if(visited[i])continue;
				visited[i]=true;
				q.add(i);
			}
		}
	}
	public static ArrayList<Integer> BFS(int vertex, int edges[][]){
		// WRITE YOUR CODE HERE
		ArrayList<Integer> ans=new ArrayList<>();
		ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
		for(int i=0;i<vertex;i++){
			adj.add(new ArrayList<>());
		}
		for (int i = 0; i < edges[0].length; i++) {
			adj.get(edges[0][i]).add(edges[1][i]);
			adj.get(edges[1][i]).add(edges[0][i]);
		}
		for(ArrayList<Integer> e:adj)Collections.sort(e);
		boolean visited[]=new boolean[vertex];
		for(int i=0;i<vertex;i++){
			if(!visited[i]){
				bfs(adj, ans, visited, i);
			}
		}
		return ans;
	}
}

