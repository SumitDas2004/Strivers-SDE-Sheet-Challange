import java.util.* ;
import java.io.*; 
public class Solution {
    static long conquer(long arr[], int l, int mid, int r){
        int j=mid+1;
        int k=0;
        int i=l;
        long cnt=0;
        long sorted[]=new long[r-l+1];
        while(i<=mid && j<=r){
            if(arr[i]<=arr[j]){
                sorted[k++]=arr[i++];
            }else{
                sorted[k++]=arr[j++];
                cnt+=mid-i+1;
            }
        }
        while(i<=mid)
        sorted[k++]=arr[i++];
        while(j<=r)
        sorted[k++]=arr[j++];
        k=0;
        for(i=l;i<=r;i++){
            arr[i]=sorted[k++];
        }
        return cnt;
    }
    static long divide(long arr[], int l, int r){
        if(l>=r)return (long)0;
        int mid=l+(r-l)/2;
        long left=divide(arr, l, mid);
        long right=divide(arr, mid+1, r);
        long con=conquer(arr, l, mid, r);
        return left+right+con;
    }
    public static long getInversions(long arr[], int n) {
        // Write your code here.
        return divide(arr, 0, n-1);
    }
}