import java.util.* ;

import java.io.*; 
/************************************************************

    Following is the TreeNode class structure

    class TreeNode<T>
    {
       public:
        T data;
        TreeNode<T> left;
        TreeNode<T> right;

        TreeNode(T data)
        {
            this.data = data;
            left = null;
            right = null;
        }
    };

************************************************************/

public class Solution 
{
    static boolean helper(Queue<TreeNode<Integer>> q, TreeNode<Integer> root, TreeNode<Integer> tar){
        if(root==null)return false;
        if(root.data.equals(tar.data)){
            q.add(root);
            return true;
        }
        boolean left=helper(q, root.left, tar);
        boolean right=helper(q, root.right, tar);
        if(left || right){
            q.add(root);
            return true;
        }
        return false;
    }
    public static TreeNode<Integer> invertBinaryTree(TreeNode<Integer> root, TreeNode<Integer> leaf) {
        // Write your code here.
        Queue<TreeNode<Integer>> q=new LinkedList<>();
        helper(q, root, leaf);
        if(q.isEmpty())return null;
        TreeNode<Integer> ans=q.poll();
        TreeNode<Integer> parent=ans;
        while(!q.isEmpty()){
            TreeNode<Integer> cur=q.poll();
            if(cur.left!=parent){
                cur.right=cur.left;
                cur.left=null;
                parent.left=cur;
            }else{
                cur.left=null;
                parent.left=cur;
            }
            parent=cur;
        }
        return ans;
    }
}
